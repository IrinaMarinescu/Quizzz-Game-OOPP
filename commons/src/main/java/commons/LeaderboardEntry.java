package commons;

import java.util.Objects;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;


/**
 * Wrapper for an entry in a (any) leaderboard
 */
@Entity
public class LeaderboardEntry implements Comparable<LeaderboardEntry> {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;

    private String name;
    private Integer score;


    /**
     * Constructor
     *
     * @param name  Name of player
     * @param score Score of player
     */
    public LeaderboardEntry(String name, int score) {
        this.name = name;
        this.score = score;
    }

    @SuppressWarnings("unused")
    private LeaderboardEntry() {
        // for object mappers.
    }

    /**
     * Getter of name field
     *
     * @return Value of name field
     */
    public String getName() {
        return name;
    }

    /**
     * Getter of score field
     *
     * @return Value of score field
     */
    public int getScore() {
        return score;
    }

    /**
     * Getter of score field (as a string)
     *
     * @return Value of score field (cast to a string)
     */
    public String getScoreString() {
        return score.toString();
    }

    /**
     * Compares this to another leaderboard entry based on the players' score
     *
     * @param other The other LeaderBoard entry to be compared to
     * @return An integer representing the which LeaderboardEntry is greater
     */
    @Override
    public int compareTo(LeaderboardEntry other) {
        return Integer.compare(other.getScore(), score);
    }

    /**
     * Autogenerated equals method
     *
     * @param o The other object to compare this one to
     * @return Whether these two objects are equal
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof LeaderboardEntry)) {
            return false;
        }
        LeaderboardEntry that = (LeaderboardEntry) o;
        return getName().equals(that.getName()) && getScoreString().equals(that.getScoreString());
    }

    /**
     * @return The hashcode of this object
     */
    @Override
    public int hashCode() {
        return Objects.hash(getName(), getScore());
    }
}
